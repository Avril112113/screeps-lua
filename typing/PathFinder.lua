-- WARNING: THIS FILE IS GENERATED, DO NOT MODIFY.


--- <p> Contains powerful methods for pathfinding in the game world. This module is written in fast native C++ code and supports custom navigation costs and paths which span multiple rooms. </p>
---@class PathFinder
--- <p>Find an optimal path between <code>origin</code> and <code>goal</code>.</p> <table><thead><tr><th>parameter</th><th>type</th><th>description</th></tr></thead><tbody><tr><td><code>origin</code></td><td><a href="https://docs.screeps.com/api/#RoomPosition">RoomPosition</a></td><td><p>The start position.</p></td></tr><tr><td><code>goal</code></td><td>object</td><td><p>A goal or an array of goals. If more than one goal is supplied then the cheapest path found out of all the goals will be returned. A goal is either a RoomPosition or an object as defined below.</p><p><em><strong>Important:</strong></em> Please note that if your goal is not walkable (for instance, a source) then you should set <code>range</code> to at least 1 or else you will waste many CPU cycles searching for a target that you can't walk on.                    </p><ul><li><div class="api-arg-title">pos</div><div class="api-arg-type"><a href="https://docs.screeps.com/api/#RoomPosition"><code>RoomPosition</code></a></div><div class="api-arg-desc">The target.</div></li><li><div class="api-arg-title">range</div><div class="api-arg-type">number</div><div class="api-arg-desc">Range to <code>pos</code> before goal is considered reached. The default is 0.</div></li></ul><p></p></td></tr><tr><td><code>opts</code><br/><em>optional</em></td><td>object</td><td><p>An object containing additional pathfinding flags.</p><ul><li><div class="api-arg-title">roomCallback</div><div class="api-arg-type">function</div><div class="api-arg-desc">Request from the pathfinder to generate a <a href="https://docs.screeps.com/api/#PathFinder-CostMatrix"><code>CostMatrix</code></a> for a certain room. The callback accepts one argument, <code>roomName</code>. This callback will only be called once per room per search. If you are running multiple pathfinding operations in a single room and in a single tick you may consider caching your CostMatrix to speed up your code. Please read the CostMatrix documentation below for more information on CostMatrix. If you return <code>false</code> from the callback the requested room will not be searched, and it won't count against <code>maxRooms</code></div></li><li><div class="api-arg-title">plainCost</div><div class="api-arg-type">number</div><div class="api-arg-desc">Cost for walking on plain positions. The default is 1.</div></li><li><div class="api-arg-title">swampCost</div><div class="api-arg-type">number</div><div class="api-arg-desc">Cost for walking on swamp positions. The default is 5.</div></li><li><div class="api-arg-title">flee</div><div class="api-arg-type">boolean</div><div class="api-arg-desc">Instead of searching for a path <em>to</em> the goals this will search for a path <em>away</em> from the goals. The cheapest path that is out of <code>range</code> of every goal will be returned. The default is false.</div></li><li><div class="api-arg-title">maxOps</div><div class="api-arg-type">number</div><div class="api-arg-desc">The maximum allowed pathfinding operations. You can limit CPU time used for the search based on ratio 1 op ~ 0.001 CPU. The default value is 2000.</div></li><li><div class="api-arg-title">maxRooms</div><div class="api-arg-type">number</div><div class="api-arg-desc">The maximum allowed rooms to search. The default is 16, maximum is 64.</div></li><li><div class="api-arg-title">maxCost</div><div class="api-arg-type">number</div><div class="api-arg-desc">The maximum allowed cost of the path returned. If at any point the pathfinder detects that it is impossible to find a path with a cost less than or equal to <code>maxCost</code> it will immediately halt the search. The default is Infinity.</div></li><li><div class="api-arg-title">heuristicWeight</div><div class="api-arg-type">number</div><div class="api-arg-desc">Weight to apply to the heuristic in the A* formula <code>F = G + weight * H</code>. Use this option only if you understand the underlying A* algorithm mechanics! The default value is 1.2.</div></li></ul></td></tr></tbody></table>
---@field search fun(origin:any,goal:any,opts:any?)
--- <div class="api-deprecated"><p>This method is deprecated and will be removed soon.</p></div> <p>Specify whether to use this new experimental pathfinder in game objects methods. This method should be invoked every tick. It affects the following methods behavior: <a href="https://docs.screeps.com/api/#Room.findPath"><code>Room.findPath</code></a>, <a href="https://docs.screeps.com/api/#RoomPosition.findPathTo"><code>RoomPosition.findPathTo</code></a>, <a href="https://docs.screeps.com/api/#RoomPosition.findClosestByPath"><code>RoomPosition.findClosestByPath</code></a>, <a href="https://docs.screeps.com/api/#Creep.moveTo"><code>Creep.moveTo</code></a>.</p> <table><thead><tr><th>parameter</th><th>type</th><th>description</th></tr></thead><tbody><tr><td><code>isEnabled</code></td><td>boolean</td><td><p>Whether to activate the new pathfinder or deactivate. The default is <code>true</code>.</p></td></tr></tbody></table>
---@field use fun(isEnabled:any)
---@field CostMatrix PathFinder.CostMatrix
local PathFinder = {}

--- <p>Container for custom navigation cost data. By default <code>PathFinder</code> will only consider terrain data (plain, swamp, wall) â€” if you need to route around obstacles such as buildings or creeps you must put them into a <code>CostMatrix</code>. Generally you will create your <code>CostMatrix</code> from within <code>roomCallback</code>. If a non-0 value is found in a room's CostMatrix then that value  will be used instead of the default terrain cost. You should avoid using large values in your  CostMatrix and terrain cost flags. For example, running <code>PathFinder.search</code> with  <code>{ plainCost: 1, swampCost: 5 }</code> is faster than running it with <code>{plainCost: 2, swampCost: 10 }</code>  even though your paths will be the same.</p>
---@class PathFinder.CostMatrix
--- <p>Set the cost of a position in this CostMatrix.</p> <table><thead><tr><th>parameter</th><th>type</th><th>description</th></tr></thead><tbody><tr><td><code>x</code></td><td>number</td><td><p>X position in the room.</p></td></tr><tr><td><code>y</code></td><td>number</td><td><p>Y position in the room.</p></td></tr><tr><td><code>cost</code></td><td>number</td><td><p>Cost of this position. Must be a whole number. A cost of 0 will use the terrain cost for that tile. A cost greater than or equal to 255 will be treated as unwalkable.</p></td></tr></tbody></table>
---@field set fun(x:any,y:any,cost:any)
--- <p>Get the cost of a position in this CostMatrix.</p> <table><thead><tr><th>parameter</th><th>type</th><th>description</th></tr></thead><tbody><tr><td><code>x</code></td><td>number</td><td><p>X position in the room.</p></td></tr><tr><td><code>y</code></td><td>number</td><td><p>Y position in the room.</p></td></tr></tbody></table>
---@field get fun(x:any,y:any)
--- <p>Copy this CostMatrix into a new CostMatrix with the same data.</p>
---@field clone fun()
--- <p>Returns a compact representation of this CostMatrix which can be stored via <code>JSON.stringify</code>.</p>
---@field serialize fun()
--- <p>Static method which deserializes a new CostMatrix using the return value of <code>serialize</code>.</p> <table><thead><tr><th>parameter</th><th>type</th><th>description</th></tr></thead><tbody><tr><td><code>val</code></td><td>object</td><td><p>Whatever <code>serialize</code> returned</p></td></tr></tbody></table>
---@field deserialize fun(val:any)
local CostMatrix = {}
